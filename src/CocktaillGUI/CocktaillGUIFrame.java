
package CocktaillGUI;

import CocktaillConsole.*;
import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author mohde
 */
public class CocktaillGUIFrame extends javax.swing.JFrame {
  
           

    FileLogger fileLogger =new FileLogger("FileLoggerForGUI.txt");
   int blenderSize = 1000;
        Blender blender = new Blender(blenderSize ,fileLogger);
       Cup[] cup ={
       new Cup(350.0, 0,fileLogger),
       new Cup(250.0, 0,fileLogger),
       new Cup(150.0, 0,fileLogger)
       };
      
Cocktail cocktail = new Cocktail();

 boolean isAdd = true;
 
       Ingredient[] ingredients = {
        
        new Fruit("Banana", 89, 118.3, "Sweet", true, 3, new Color(255, 251, 201)),
        new Fruit("Strawberry", 32, 100.0, "Sweet", true, 3, new Color(186, 42, 71)),
        new Fruit("Lemon", 29, 108.0, "Sour", false, -3, new Color(255, 250, 200)),
        new Fruit("Orange", 47, 131.0, "Sweet", true, 3, new Color(247, 202, 5)),
        new Fruit("Mango", 60, 135.0, "Sweet", true, 4, new Color(255, 191, 52)),
        new Fruit("Apple", 52, 100.4, "Sweet", true, 3, new Color(245, 154, 64)),
        new Fruit("Guava", 68, 100.0, "Sweet", true, 3, new Color(217, 203, 160)),
        new Fruit("Grapes", 69, 151.0, "Sweet", true, 4, new Color(104, 41, 97)),
        new Fruit("Berries", 43, 100.0, "Sweet", true, 3, new Color(153, 15, 75)),
        new Fruit("Pineapple", 50, 100.0, "Sweet", true, 3, new Color(254, 234, 99)),
        new Fruit("Kiwi", 61, 100.0, "Sour", false, -3, new Color(122, 150, 15)),
        new Liquid("Milk", 42, 240.0, "Neutral", false, 0, new Color(255, 255, 240)),
        new Liquid("Strawberry Milk", 60, 240.0, "Sweet", true, 3, new Color(255, 182, 193)),
        new Liquid("Honey", 304, 355.0, "Sweet", true, 5, new Color(231, 154, 63)),
        new Sugar("Sugar", 16, 10.2, "Sweet", true, 5)
       };
  

    /**
     * Creates new form NewJFrame
     */
    public CocktaillGUIFrame() {
        
              initComponents();
              
        String BlenderSize = String.valueOf(blenderSize);
        capacityBlenderText.setText(BlenderSize + " ml");
        
        String remainingCapacityDoubleText = String.valueOf(blender.getBlenderCapacity() - blender.getCocktailVolume());
        double remainingCapacityDouble = Double.parseDouble(remainingCapacityDoubleText);
        int remainingCapacityInt = (int) remainingCapacityDouble;
        String remainingCapacity = String.valueOf(remainingCapacityInt);
             remainingCapacityText.setText(remainingCapacity + " ml");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        HomePage = new javax.swing.JPanel();
        Logo = new javax.swing.JLabel();
        MixButton = new javax.swing.JButton();
        CockInfoButton = new javax.swing.JButton();
        CleanButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        TextArea1 = new javax.swing.JScrollPane();
        textHome = new javax.swing.JTextArea();
        FinalColor = new javax.swing.JPanel();
        GoToMenu = new javax.swing.JPanel();
        Menu = new javax.swing.JScrollPane();
        ingredientList = new javax.swing.JList<>();
        IngredientInfo = new javax.swing.JScrollPane();
        ingredientInfoTextArea = new javax.swing.JTextArea();
        AddingIngredient = new javax.swing.JScrollPane();
        textAdded = new javax.swing.JTextArea();
        AddIngredientButton = new javax.swing.JButton();
        ingredientColorPanel = new javax.swing.JPanel();
        capacityBlenderText = new javax.swing.JTextField();
        remainingCapacityText = new javax.swing.JTextField();
        Pour = new javax.swing.JPanel();
        CupLogo1 = new javax.swing.JLabel();
        CupLogo2 = new javax.swing.JLabel();
        CupLogo3 = new javax.swing.JLabel();
        SmallCup = new javax.swing.JRadioButton();
        MediumCup = new javax.swing.JRadioButton();
        LargeCup = new javax.swing.JRadioButton();
        TextArea2 = new javax.swing.JScrollPane();
        textPour = new javax.swing.JTextArea();
        PourButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cocktail");
        setResizable(false);

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Logo.png"))); // NOI18N
        Logo.setText("jLabel1");

        MixButton.setText("Mix the ingredient");
        MixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MixButtonActionPerformed(evt);
            }
        });

        CockInfoButton.setText("Cocktail information");
        CockInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CockInfoButtonActionPerformed(evt);
            }
        });

        CleanButton.setText("Clean the blender");
        CleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        textHome.setEditable(false);
        textHome.setColumns(20);
        textHome.setRows(5);
        TextArea1.setViewportView(textHome);

        FinalColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout FinalColorLayout = new javax.swing.GroupLayout(FinalColor);
        FinalColor.setLayout(FinalColorLayout);
        FinalColorLayout.setHorizontalGroup(
            FinalColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );
        FinalColorLayout.setVerticalGroup(
            FinalColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout HomePageLayout = new javax.swing.GroupLayout(HomePage);
        HomePage.setLayout(HomePageLayout);
        HomePageLayout.setHorizontalGroup(
            HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HomePageLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FinalColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(HomePageLayout.createSequentialGroup()
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, HomePageLayout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HomePageLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(HomePageLayout.createSequentialGroup()
                                .addComponent(MixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(81, 81, 81)
                                .addComponent(CockInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(HomePageLayout.createSequentialGroup()
                                .addComponent(CleanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(81, 81, 81)
                                .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        HomePageLayout.setVerticalGroup(
            HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePageLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CockInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CleanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(HomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FinalColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextArea1))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("Home Page", HomePage);

        ingredientList.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu"));
        ingredientList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Banana", "Strawberry", "Lemon", "Orange", "Mango", "Apple", "Guava", "Grapes", "Berries", "Pineapple", "Kiwi", "Milk", "Strawberry Milk", "Honey", "Sugar" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ingredientList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ingredientList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ingredientListValueChanged(evt);
            }
        });
        Menu.setViewportView(ingredientList);

        ingredientInfoTextArea.setEditable(false);
        ingredientInfoTextArea.setColumns(20);
        ingredientInfoTextArea.setRows(5);
        ingredientInfoTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingredients information"));
        IngredientInfo.setViewportView(ingredientInfoTextArea);

        textAdded.setEditable(false);
        textAdded.setColumns(20);
        textAdded.setRows(5);
        textAdded.setBorder(javax.swing.BorderFactory.createTitledBorder("Added ingredients"));
        AddingIngredient.setViewportView(textAdded);

        AddIngredientButton.setText("Add the ingredient");
        AddIngredientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddIngredientButtonActionPerformed(evt);
            }
        });

        ingredientColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout ingredientColorPanelLayout = new javax.swing.GroupLayout(ingredientColorPanel);
        ingredientColorPanel.setLayout(ingredientColorPanelLayout);
        ingredientColorPanelLayout.setHorizontalGroup(
            ingredientColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );
        ingredientColorPanelLayout.setVerticalGroup(
            ingredientColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        capacityBlenderText.setEditable(false);
        capacityBlenderText.setBorder(javax.swing.BorderFactory.createTitledBorder("blender capacity"));
        capacityBlenderText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacityBlenderTextActionPerformed(evt);
            }
        });

        remainingCapacityText.setEditable(false);
        remainingCapacityText.setBorder(javax.swing.BorderFactory.createTitledBorder("remaining capacity"));
        remainingCapacityText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remainingCapacityTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GoToMenuLayout = new javax.swing.GroupLayout(GoToMenu);
        GoToMenu.setLayout(GoToMenuLayout);
        GoToMenuLayout.setHorizontalGroup(
            GoToMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GoToMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GoToMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GoToMenuLayout.createSequentialGroup()
                        .addComponent(Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(GoToMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(GoToMenuLayout.createSequentialGroup()
                                .addGroup(GoToMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(GoToMenuLayout.createSequentialGroup()
                                        .addComponent(IngredientInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ingredientColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(AddingIngredient))
                                .addGap(15, 15, 15))
                            .addGroup(GoToMenuLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(AddIngredientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(GoToMenuLayout.createSequentialGroup()
                        .addComponent(capacityBlenderText, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(remainingCapacityText, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        GoToMenuLayout.setVerticalGroup(
            GoToMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GoToMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GoToMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(GoToMenuLayout.createSequentialGroup()
                        .addGroup(GoToMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(IngredientInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(GoToMenuLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(ingredientColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(AddingIngredient, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AddIngredientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addGroup(GoToMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(remainingCapacityText, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(capacityBlenderText))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Go to menu", GoToMenu);

        CupLogo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Cup.png"))); // NOI18N
        CupLogo1.setText("jLabel2");

        CupLogo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Cup.png"))); // NOI18N
        CupLogo2.setText("jLabel3");

        CupLogo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Cup.png"))); // NOI18N
        CupLogo3.setText("jLabel4");

        buttonGroup1.add(SmallCup);
        SmallCup.setText("Small(150 ml)");

        buttonGroup1.add(MediumCup);
        MediumCup.setText("Medium (250 ml)");
        MediumCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MediumCupActionPerformed(evt);
            }
        });

        buttonGroup1.add(LargeCup);
        LargeCup.setText("Large(350 ml)");
        LargeCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LargeCupActionPerformed(evt);
            }
        });

        textPour.setEditable(false);
        textPour.setColumns(20);
        textPour.setRows(5);
        TextArea2.setViewportView(textPour);

        PourButton.setText("Pour");
        PourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PourButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PourLayout = new javax.swing.GroupLayout(Pour);
        Pour.setLayout(PourLayout);
        PourLayout.setHorizontalGroup(
            PourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PourLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(PourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(CupLogo1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SmallCup))
                .addGap(18, 18, 18)
                .addGroup(PourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(CupLogo2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MediumCup)
                    .addComponent(PourButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(CupLogo3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LargeCup))
                .addContainerGap(54, Short.MAX_VALUE))
            .addGroup(PourLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextArea2)
                .addContainerGap())
        );
        PourLayout.setVerticalGroup(
            PourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PourLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(PourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(CupLogo3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CupLogo2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CupLogo1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(PourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LargeCup)
                    .addComponent(MediumCup)
                    .addComponent(SmallCup))
                .addGap(42, 42, 42)
                .addComponent(PourButton, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(TextArea2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Pour into cups", Pour);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
Color defaultColor = new Color(242, 242, 242);

    private void MixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MixButtonActionPerformed
        // TODO add your handling code here:
        

          try {
                        // Mix the ingredients to create a cocktail
                        if (isAdd) {
                          
                            isAdd=false;
                            cocktail = blender.mix();
                            textHome.setText("The ingredients have been mixed successfully");
                            //ingredientInfoTextArea.setText("");
                            textAdded.setText("");
                             FinalColor.setBackground(defaultColor);
                        } else {
                            JOptionPane.showMessageDialog(this ,"Please enter new ingredients." , "",JOptionPane.ERROR_MESSAGE);
                            textHome.setText("");
                            
                        }
                    } catch (BlenderIsEmptyException ex) {
                        textHome.setText("");
                        JOptionPane.showMessageDialog(this ,ex.getMessage() , "Blender Is Empty",JOptionPane.ERROR_MESSAGE);
                       
                      
                    }
        
    }//GEN-LAST:event_MixButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(this, "Are you sure?" , "Exit" , JOptionPane.YES_NO_OPTION);
        if(option == JOptionPane.YES_OPTION )
        {
         fileLogger.clearLog();
        System.exit(0);
        
        }
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void AddIngredientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddIngredientButtonActionPerformed
        // TODO add your handling code here:
        if(ingredientList.getSelectedIndex()!=-1){
         try{
        String nameIngredient = ingredientList.getSelectedValue();
      
       
       isAdd=true;
      int index = ingredientList.getSelectedIndex();
      blender.addIngredient(ingredients[index]);
        textAdded.append(nameIngredient+"\n");
        textHome.setText("");
        FinalColor.setBackground(defaultColor);
         
        String remainingCapacityDoubleText = String.valueOf(blender.getBlenderCapacity() - blender.getCocktailVolume());
        double remainingCapacityDouble = Double.parseDouble(remainingCapacityDoubleText);
        int remainingCapacityInt = (int) remainingCapacityDouble;
        String remainingCapacity = String.valueOf(remainingCapacityInt);
             remainingCapacityText.setText(remainingCapacity + " ml");
        }
        catch (BlenderOverflowException ex) {
            
            JOptionPane.showMessageDialog(this ,ex.getMessage(blender) , "Blender Overflow",JOptionPane.ERROR_MESSAGE);
                                }
        }
        else
            JOptionPane.showMessageDialog(this , "please add at least one ingredient" , "",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_AddIngredientButtonActionPerformed



         Color defultColorOnGUI =new Color(242,242,242);
    private void CockInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CockInfoButtonActionPerformed
        // TODO add your handling code here:
         textHome.setText(cocktail.getInfoGUI());
         
         if (cocktail.getFinalColor().getRed()==0&&cocktail.getFinalColor().getGreen()==0&&cocktail.getFinalColor().getBlue()==0){
         cocktail.setFinalColor(defultColorOnGUI);
         }
         
         FinalColor.setBackground(cocktail.getFinalColor());
         
    }//GEN-LAST:event_CockInfoButtonActionPerformed


    private void CleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleanButtonActionPerformed
        // TODO add your handling code here:
        blender.cleanBlender(cocktail, blender);
        textHome.setText("The blender has been cleaned");
        textAdded.setText("");
       // ingredientInfoTextArea.setText("");
        FinalColor.setBackground(defaultColor);
        String remainingCapacityDoubleText = String.valueOf(blender.getBlenderCapacity() - blender.getCocktailVolume());
        double remainingCapacityDouble = Double.parseDouble(remainingCapacityDoubleText);
        int remainingCapacityInt = (int) remainingCapacityDouble;
        String remainingCapacity = String.valueOf(remainingCapacityInt);
         remainingCapacityText.setText(remainingCapacity + " ml");
         
    }//GEN-LAST:event_CleanButtonActionPerformed

    private void ingredientListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ingredientListValueChanged
        // TODO add your handling code here:
        int index = ingredientList.getSelectedIndex();
        ingredientInfoTextArea.setText(ingredients[index].getInfo() + "\n");
        int selectedIndex = ingredientList.getSelectedIndex();
            if (selectedIndex != -1) { // If an ingredient is selected
                // Get the selected ingredient
                Ingredient selectedIngredient = ingredients[selectedIndex];
                // Update the ingredient information text area
                ingredientInfoTextArea.setText(selectedIngredient.getInfo());
                // Update the background color of the IngredientColor panel
                if (selectedIngredient instanceof Fruit) {
                    Fruit selectedFruit = (Fruit) selectedIngredient;
                    ingredientColorPanel.setBackground(selectedFruit.getColor());
                } else if (selectedIngredient instanceof Liquid) {
                    Liquid selectedLiquid = (Liquid) selectedIngredient;
                    ingredientColorPanel.setBackground(selectedLiquid.getColor());
                } else {
                    // For other types of ingredients, you might handle differently or set a default color
                    ingredientColorPanel.setBackground(defaultColor);
                }
            }

    }//GEN-LAST:event_ingredientListValueChanged

    private void PourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PourButtonActionPerformed
        // TODO add your handling code here:
        try {
            if(SmallCup.isSelected()){
                textPour.setText(cup[2].pourCocktail(cocktail, blender));
                FinalColor.setBackground(defaultColor);
                textHome.setText("");
                String remainingCapacityDoubleText = String.valueOf(blender.getBlenderCapacity() - blender.getCocktailVolume());
        double remainingCapacityDouble = Double.parseDouble(remainingCapacityDoubleText);
        int remainingCapacityInt = (int) remainingCapacityDouble;
        String remainingCapacity = String.valueOf(remainingCapacityInt);
        remainingCapacityText.setText(remainingCapacity + " ml");
            }
            else
            if(MediumCup.isSelected()){
                textPour.setText(cup[1].pourCocktail(cocktail, blender));
                FinalColor.setBackground(defaultColor);
                textHome.setText("");
        String remainingCapacityDoubleText = String.valueOf(blender.getBlenderCapacity() - blender.getCocktailVolume());
        double remainingCapacityDouble = Double.parseDouble(remainingCapacityDoubleText);
        int remainingCapacityInt = (int) remainingCapacityDouble;
        String remainingCapacity = String.valueOf(remainingCapacityInt);
        remainingCapacityText.setText(remainingCapacity + " ml");
            }
            else
            if(LargeCup.isSelected()){
                textPour.setText(cup[0].pourCocktail(cocktail, blender));
                FinalColor.setBackground(defaultColor);
                textHome.setText("");
        String remainingCapacityDoubleText = String.valueOf(blender.getBlenderCapacity() - blender.getCocktailVolume());
        double remainingCapacityDouble = Double.parseDouble(remainingCapacityDoubleText);
        int remainingCapacityInt = (int) remainingCapacityDouble;
        String remainingCapacity = String.valueOf(remainingCapacityInt);
        remainingCapacityText.setText(remainingCapacity + " ml");
            }
            else
            JOptionPane.showMessageDialog(this ,"Please select a cup" , "",JOptionPane.ERROR_MESSAGE);

        } catch (BlenderIsEmptyException ex) {
            JOptionPane.showMessageDialog(this ,ex.getMessage() , "Blender Is Empty",JOptionPane.ERROR_MESSAGE);
            FinalColor.setBackground(defaultColor);
            textPour.setText("");
        }
    }//GEN-LAST:event_PourButtonActionPerformed

    private void LargeCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LargeCupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LargeCupActionPerformed

    private void MediumCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MediumCupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MediumCupActionPerformed

    private void capacityBlenderTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacityBlenderTextActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_capacityBlenderTextActionPerformed

    private void remainingCapacityTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remainingCapacityTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_remainingCapacityTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CocktaillGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CocktaillGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CocktaillGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CocktaillGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CocktaillGUIFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddIngredientButton;
    private javax.swing.JScrollPane AddingIngredient;
    private javax.swing.JButton CleanButton;
    private javax.swing.JButton CockInfoButton;
    private javax.swing.JLabel CupLogo1;
    private javax.swing.JLabel CupLogo2;
    private javax.swing.JLabel CupLogo3;
    private javax.swing.JButton ExitButton;
    private javax.swing.JPanel FinalColor;
    private javax.swing.JPanel GoToMenu;
    private javax.swing.JPanel HomePage;
    private javax.swing.JScrollPane IngredientInfo;
    private javax.swing.JRadioButton LargeCup;
    private javax.swing.JLabel Logo;
    private javax.swing.JRadioButton MediumCup;
    private javax.swing.JScrollPane Menu;
    private javax.swing.JButton MixButton;
    private javax.swing.JPanel Pour;
    private javax.swing.JButton PourButton;
    private javax.swing.JRadioButton SmallCup;
    private javax.swing.JScrollPane TextArea1;
    private javax.swing.JScrollPane TextArea2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField capacityBlenderText;
    private javax.swing.JPanel ingredientColorPanel;
    private javax.swing.JTextArea ingredientInfoTextArea;
    private javax.swing.JList<String> ingredientList;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField remainingCapacityText;
    private javax.swing.JTextArea textAdded;
    private javax.swing.JTextArea textHome;
    private javax.swing.JTextArea textPour;
    // End of variables declaration//GEN-END:variables
}
